---
title: "Saga Software"
date: today
author: "Thomas Haverkamp, Eve Fiskebeck, \nKarin Lagesen, Novicha Nakov"
institute: "NVI"
format: 
  revealjs: 
    embed-resources: true
    logo: "./img/logo.png"
    slide-number: c/t
    incremental: false
    title-slide-attributes: 
      data-background-image: "./img/front_page.png"
      data-background-size: "50%"
      data-background-position: "50% 95%"
execute: 
  cache: false
editor: 
  markdown: 
    wrap: 72
---

## Softwares in SAGA:

-   Conda

-   Modules

-   Containers


# Conda


# Modules


# Containers


## What is a container ?

-   Bundle: software, libraries and dependencies in an OS

-   Different types containers (apptainer, docker, singularity, ...)[^1]

> An introduction on containers 
> [BioContainers](https://biocontainers-edu.readthedocs.io/en/latest/)


[^1]: Some compatibility


## Where to find containers

-   Tool own image link, Eg. [BUSCO](https://busco.ezlab.org/) provide
    Docker containers
-   [Biocontainers](https://quay.io/repository/biocontainers) - Community[^2]
-   [Docker Hub](https://hub.docker.com/), Eg. account of "unknown
    people" [^3]

::: aside
(By order of preference)
:::


[^2]: Community that builds containers <https://biocontainers.pro/> With
their [github repository](https://github.com/BioContainers/containers)
where you can find the recipies for building

[^3]: [Like me](https://hub.docker.com/search?q=evezeyl); Not necessary
    all functional nor secure...

# `.bashrc` configuration for easy container usage

## cache / storage location of images

::: {.notes}
-  Some configuration to avoid having to specify options every time you run
a container (makes it much easier to use containers)
:::

lines to add to  `~/.bashrc`

```{.bash}
export APPTAINER_CACHEDIR=${USERWORK}/images

export NXF_APPTAINER_CACHEDIR=${USERWORK}/images
export NXF_APPTAINER_LIBRARYDIR=${USERWORK}/images
```


::: {.notes}
-  Defines where to cache and store containers on SAGA (some variables
   specific for Nextflow container usage: `NFX_`)
:::

## Defines mounting/binding directories  

::: {.notes}
- Directories you bind/mount become accessible when you use the container    

- You can bind a specific directory on SAGA to a specific directory path
mounted in on the container. This can be useful if some software require
a particular organisation of directories and subdirectories (happens
sometimes).

- The most simple it to use the configuration in `.bashrc` or not
specifying the path inside the container, in which case the mounting
path is the same as the one on SAGA, avoiding the need of conversion of
paths.

::: 

```{.bash}
export NXF_APPTAINER_HOME_MOUNT=true
export APPTAINER_BIND="$USERWORK,/cluster/projects/nn9305k/active/<username>,/cluster/projects/nn9305k/db_flatfiles"
```


# How to use containers in SAGA?

> Apptainer

## Pull a container (build image)

Login node (require internet access in this case)

```{.bash}
apptainer pull busco.sif docker://ezlabgva/busco:v5.7.1_cv1
```


## Interactively 

  - Ask interactive resources
  
  - Set an environment variable referring to the path of your image and run.

```{.bash} 
IMG="/cluster/work/users/evezeyl/images/busco.sif"
apptainer shell $IMG
```


Note the prompt !

- A simple test example of usage:

```{.bash}     
ls
busco --list-datasets > 2024-04-29_list_datasets_busco.txt
```

## Mounting custom paths

:::: {.columns}
::: {.column width="60%"}

- full path starting from root

```{.bash}
apptainer exec --bind </saga_path>:</container_path> my_container.sif <command>
```
::: aside
[Complete info on click!](https://apptainer.org/docs/user/main/bind_paths_and_mounts.html)
:::

:::

::: {.column width="40%"}
![bind paths](./img/2024-05-14_10.28.18.excalidraw.png)
::: 
:::



## In a Slurm script 

::: {.notes}
add `apptainer exec $IMG` before the command you want to run
::: 

simple syntax
``` bash
apptainer exec $IMG  <command>
```

example:

``` bash
IMG="/cluster/work/users/evezeyl/images/masurca.sif"
apptainer exec $IMG  masurca -t 4 -i ${R1},${R2} -r ${long_read}  2>&1 | tee masurca_test.log
```

## Build own containers ? 

- A recipe for building is written in a file (def file)

! can be time consuming (first search if already existing)

::: aside
[apptainer documentation](https://apptainer.org/docs/user/main/cli/apptainer_build.html)
::: 


- Recipe "simple" language - compatibility different container systems 
(docker -> apptainer)

::: {.notes}
An example of what I do: (on a linux machine not on SAGA) -
Compatibility - docker (non root) - recipe - push to docker hub - pull
with apptainer

PS: not advanced but working when nothing is already made

- does not have to be docker but is often build in docker - more examples, 
and compatibility transformation to singularity, apptainer osv...

- From Saga -> apptainer (cannot build docker)
- Other systems - your choice ...
:::


## some Advantages / disadvantages of containers

-   full reproducibility (OS + software and dependencies)
-   No update (both good and bad ...if you want latest)
-   Takes storage space
-   Easy ? ...

# Ressources

## Tutorials

-  Reproducible Computational Environments Using Containers: Introduction to Docker, A [Carpentries Incubator lesson](https://carpentries-incubator.github.io/docker-introduction/)

## Documentation

-   [Apptainer](https://apptainer.org/)

-   [Docker](https://docs.docker.com/)

-   [Singularity](https://docs.sylabs.io/guides/3.5/user-guide/introduction.html)

```{=html}
<!--  Examples: Based on template 
Novicha: https://github.com/NorwegianVeterinaryInstitute/slides-nvi-data-eng

Quarto: 
- https://quarto.org/docs/presentations/
- https://quarto.org/docs/presentations/revealjs/

! Build did not work when on one-drive synced directory (do not ask me why !)
-->
```
